// –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
const cron = require("node-cron");
const nodemailer = require("nodemailer");
const { Pool } = require("pg");
require("dotenv").config();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMTP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.SMTP_EMAIL,
    pass: process.env.SMTP_PASSWORD,
  },
});

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notificationsMap = {
  is_income: {
    title: "üí∏ –ü–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ–ø–∏–ª–∫—É!",
    description: "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–Ω–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî –¥–∞–π—Ç–µ –¥–µ–Ω—å–≥–∞–º –∑–Ω–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ –≤–∞–º –Ω—É–∂–Ω—ã! üòâ",
  },
  is_expense: {
    title: "üìâ –†–∞—Å—Ö–æ–¥—ã –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º",
    description: "–î–æ–±–∞–≤—å—Ç–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ç—Ä–∞—Ç—ã –∏ –Ω–µ –¥–∞–π—Ç–µ –¥–µ–Ω—å–≥–∞–º —É—Å–∫–æ–ª—å–∑–Ω—É—Ç—å –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º–∏!",
  },
  is_goals: {
    title: "üéØ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏ –∂–¥—É—Ç –≤–∞—Å",
    description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å: –∫–∞–∂–¥–∞—è –∫–æ–ø–µ–π–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –º–µ—á—Ç–µ!",
  },
  is_reports: {
    title: "üìä –í–∞—à –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç",
    description: "–ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –æ—Ç—á—ë—Ç—ã –∏ —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ –≤—ã —É–ø—Ä–∞–≤–ª—è–ª–∏ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ —Å–µ–≥–æ–¥–Ω—è.",
  },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async function sendNotifications() {
  const client = await pool.connect();
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const res = await client.query("SELECT * FROM notification_check");

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const row of res.rows) {
      const { ulogin, last_notified } = row;
      const now = new Date();
      const diffHours = (now - new Date(last_notified)) / 1000 / 60 / 60;

      // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (diffHours < 24) continue;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      for (const key of Object.keys(notificationsMap)) {
        if (row[key]) {
          // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          const userRes = await client.query(
            "SELECT email FROM users WHERE login = $1",
            [ulogin]
          );
          const email = userRes.rows[0]?.email;
          if (!email) continue;

          let { title, description } = notificationsMap[key];

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π
          if (key === "is_goals") {
            const goalsRes = await client.query(
              "SELECT title, amount, saved, deadline FROM goals WHERE ulogin = $1",
              [ulogin]
            );

            const goalMessages = [];
            const nowDate = new Date();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏
            for (const goal of goalsRes.rows) {
              const { title: goalTitle, amount, saved, deadline } = goal;
              const progress = saved / amount;
              const deadlineDate = new Date(deadline);
              const daysLeft = Math.ceil((deadlineDate - nowDate) / (1000 * 60 * 60 * 24));

              // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ü–µ–ª—è–º
              if (progress >= 0.8 && progress < 1) {
                goalMessages.push(`–í—ã –ø–æ—á—Ç–∏ –Ω–∞–∫–æ–ø–∏–ª–∏ –Ω–∞ ${goalTitle}! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å.`);
              }

              if (daysLeft <= 7 && progress < 1) {
                goalMessages.push(`–ü–æ—Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å! –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ —Ü–µ–ª–∏ "${goalTitle}" –æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω${daysLeft === 1 ? "—å" : "—è"}.`);
              }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–µ–π
            if (goalMessages.length > 0) {
              description = goalMessages.join("\n");
            } else {
              description = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å: –∫–∞–∂–¥–∞—è –∫–æ–ø–µ–π–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –º–µ—á—Ç–µ!";
            }
          }

          // –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          await transporter.sendMail({
            from: process.env.SMTP_EMAIL,
            to: email,
            subject: title,
            html: `
            <div style="font-family: Arial, sans-serif; padding: 20px; background-color: #f4f6f8;">
              <div style="max-width: 600px; margin: auto; background-color: #ffffff; padding: 30px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
                <h2 style="color: #2c3e50;">üëã –ü—Ä–∏–≤–µ—Ç, <strong>${ulogin}</strong>!</h2>
                <p style="font-size: 16px; color: #34495e; line-height: 1.6;">${description.replace(/\n/g, "<br>")}</p>
                <div style="margin-top: 30px; text-align: center;">
                  <a href="https://minote.ru" style="background-color: #4CAF50; color: white; padding: 12px 20px; border-radius: 6px; text-decoration: none; font-weight: bold;">–ü–µ—Ä–µ–π—Ç–∏ –≤ Minote</a>
                </div>
                <hr style="margin: 30px 0; border: none; border-top: 1px solid #e0e0e0;" />
                <p style="font-size: 13px; color: #95a5a6;">–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ Minote.ru</p>
              </div>
            </div>
          `,
          });

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          await client.query(
            "INSERT INTO notification (title, description, ulogin) VALUES ($1, $2, $3)",
            [title, description, ulogin]
          );
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await client.query(
        "UPDATE notification_check SET last_notified = NOW() WHERE ulogin = $1",
        [ulogin]
      );
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", err);
  } finally {
    client.release();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function startDailyNotifications() {
  cron.schedule("0 10 * * *", () => {
    console.log("‚úÖ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", new Date().toLocaleString());
    sendNotifications();
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
module.exports = startDailyNotifications;
