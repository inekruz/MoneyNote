import React, { useEffect, useState, useCallback } from 'react';
import {
  AreaChart, Area, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid,
  PieChart, Pie, Cell, Legend
} from 'recharts';
import { motion } from 'framer-motion';
import '@lottiefiles/lottie-player';
import './css/charts.css';
import { format, parseISO } from 'date-fns';

// –¶–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º
const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff8042', '#ff6666', '#66cccc'];

const Charts = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  const [categories, setCategories] = useState([]); // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
  const [transactions, setTransactions] = useState([]); // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const [allTransactions, setAllTransactions] = useState([]); // –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const [selectedCategory, setSelectedCategory] = useState(''); // –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  const [startDate, setStartDate] = useState(''); // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
  const [endDate, setEndDate] = useState(''); // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
  const [adviceText, setAdviceText] = useState(''); // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const fetchAllTransactions = async () => {
    const token = localStorage.getItem("token");
    const res = await fetch('https://api.minote.ru/inex/alltransactions', {
      headers: { Authorization: `Bearer ${token}` }
    });

    const data = await res.json();
    setAllTransactions(data); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const fetchCategories = async () => {
    const res = await fetch('https://api.minote.ru/inex/categories');
    const data = await res.json();
    setCategories(data); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const fetchTransactions = useCallback(async () => {
    const token = localStorage.getItem("token");
    const res = await fetch('https://api.minote.ru/inex/transactions', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },
      body: JSON.stringify({
        categoryId: selectedCategory || undefined,
        startDate: startDate || undefined,
        endDate: endDate || undefined,
      }),
    });
    const data = await res.json();
    setTransactions(data); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  }, [selectedCategory, startDate, endDate]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchCategories();
    fetchAllTransactions();
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    fetchTransactions();
  }, [fetchTransactions]);

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞
  const totalIncome = allTransactions
    .filter(tx => tx.type === 'income')
    .reduce((sum, tx) => sum + parseFloat(tx.amount), 0);

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
  const totalExpense = allTransactions
    .filter(tx => tx.type === 'expense')
    .reduce((sum, tx) => sum + parseFloat(tx.amount), 0);

  // –ë–∞–ª–∞–Ω—Å
  const balance = Math.max(0, totalIncome - totalExpense);

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
  useEffect(() => {
    if (transactions.length === 0) return;

    const income = transactions
      .filter(tx => tx.type === 'income')
      .reduce((sum, tx) => sum + parseFloat(tx.amount), 0);

    const expense = transactions
      .filter(tx => tx.type === 'expense')
      .reduce((sum, tx) => sum + parseFloat(tx.amount), 0);

    const rawBalance = income - expense;

    const expenseCategories = transactions
      .filter(tx => tx.type === 'expense')
      .reduce((acc, tx) => {
        const category = tx.category_name || tx.category?.name || tx.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
        const amount = parseFloat(tx.amount);
        if (isNaN(amount)) return acc;

        acc[category] = acc[category] || { name: category, value: 0 };
        acc[category].value += amount;
        return acc;
      }, {});

    const highExpenseCategories = Object.values(expenseCategories)
      .filter(cat => cat.value > expense * 0.25)
      .sort((a, b) => b.value - a.value);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    const generateFinancialAdvice = () => {
      const advice = [];

      const savingsRate = income > 0 ? ((income - expense) / income) * 100 : 0;
      const expenseRate = income > 0 ? (expense / income) * 100 : 0;

      if (rawBalance < 0) {
        advice.push(`‚ùó –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Ö–æ–¥—ã –Ω–∞ ${Math.abs(rawBalance).toFixed(2)} ‚ÇΩ.`);
      } else if (rawBalance === 0) {
        advice.push("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–∞ –Ω—É–ª–µ. –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã.");
      } else {
        advice.push(`‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${rawBalance.toFixed(2)} ‚ÇΩ.`);
      }

      if (savingsRate < 10) {
        advice.push("üí° –í—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ –º–µ–Ω–µ–µ 10% –¥–æ—Ö–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ö–æ—Ç—è –±—ã 20%.");
      } else if (savingsRate > 30) {
        advice.push("üëè –û—Ç–ª–∏—á–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî –±–æ–ª–µ–µ 30% –¥–æ—Ö–æ–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.");
      }

      if (highExpenseCategories.length > 0) {
        const categoriesList = highExpenseCategories
          .map(cat => `${cat.name} (${cat.value.toFixed(0)} ‚ÇΩ)`)
          .join(', ');
        advice.push(`üîç –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã: ${categoriesList}.`);
      }

      if (expenseRate > 90) {
        advice.push("üö® –í—ã —Ç—Ä–∞—Ç–∏—Ç–µ –ø–æ—á—Ç–∏ –≤–µ—Å—å –¥–æ—Ö–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –±—é–¥–∂–µ—Ç.");
      }

      if (income === 0) {
        advice.push("üìâ –î–æ—Ö–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ù–∞–π–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞.");
      }

      return advice;
    };

    const finalAdvice = generateFinancialAdvice();
    setAdviceText(finalAdvice.join('\n')); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  }, [transactions]);

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
  const chartData = transactions.map(tx => ({
    date: format(parseISO(tx.date), 'dd.MM.yy'),
    amount: tx.amount,
    category: tx.category_name,
  }));

  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const totalTransactions = transactions.length;
  // –°—É–º–º–∞ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const totalAmount = transactions.reduce((sum, tx) => sum + parseFloat(tx.amount), 0);

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
  const pieData = Object.values(
    transactions.reduce((acc, tx) => {
      const category = tx.category_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const amount = parseFloat(tx.amount);
      if (isNaN(amount)) return acc;

      acc[category] = acc[category] || { name: category, value: 0 };
      acc[category].value += amount;
      return acc;
    }, {})
  );

  return (
    <div className="charts-container">
      <h2>üìä –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã</h2>

      {/* –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–∞—Ç */}
      <div className="filters">
        <select value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)}>
          <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
          {categories.map((cat) => (
            <option key={cat.id} value={cat.id}>{cat.name}</option>
          ))}
        </select>

        <input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
        <input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
      </div>

      {/* –†–µ–∑—é–º–µ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º */}
      <div className="summary">
        <p>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {totalTransactions}</p>
        <p>–°—É–º–º–∞—Ä–Ω–æ: {totalAmount.toFixed(2)} ‚ÇΩ</p>
        <p>üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance.toFixed(2)} ‚ÇΩ</p>
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é */}
      {adviceText && (
        <div className="summary" style={{ whiteSpace: 'pre-wrap', marginTop: '1rem' }}>
          <strong>üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong>
          <p>{adviceText}</p>
        </div>
      )}

      {/* –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ */}
      {pieData.length > 0 && (
        <motion.div
          className="donut-chart"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
        >
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={pieData}
                cx="50%"
                cy="50%"
                innerRadius={70}
                outerRadius={100}
                fill="#8884d8"
                paddingAngle={2}
                dataKey="value"
                labelLine={false}
                label={({ percent, value }) =>
                  `${(percent * 100).toFixed(2)}% (${value.toFixed(1)} ‚ÇΩ)`
                }
              >
                {pieData.map((_, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <Tooltip
                formatter={(value, name) => [`${value} ‚ÇΩ`, name]}
                contentStyle={{ backgroundColor: '#2a2d34', borderColor: '#848994' }}
              />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </motion.div>
      )}

      {/* –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ */}
      <motion.div
        className="chart-wrapper"
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8 }}
      >
        {chartData.length > 0 ? (
          <ResponsiveContainer width="100%" height={350}>
            <AreaChart
              data={chartData}
              margin={{ top: 10, right: 20, left: 0, bottom: 40 }}
            >
              <defs>
                <linearGradient id="colorBalance" x1="0" y1="0" x2="0" y2="1" spreadMethod="pad">
                  <stop offset="5%" stopColor="#8884d8" stopOpacity={0.8} />
                  <stop offset="95%" stopColor="#8884d8" stopOpacity={0} />
                </linearGradient>
              </defs>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Area
                type="monotone"
                dataKey="amount"
                stroke="#8884d8"
                fillOpacity={1}
                fill="url(#colorBalance)"
              />
            </AreaChart>
          </ResponsiveContainer>
        ) : (
          <p>–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
        )}
      </motion.div>
    </div>
  );
};

export default Charts;
